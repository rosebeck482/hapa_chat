<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Simple Rasa Chat</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
        }
        #chat-container {
            height: 400px;
            border: 1px solid #ccc;
            padding: 10px;
            overflow-y: auto;
            margin-bottom: 10px;
            border-radius: 5px;
        }
        #user-input {
            width: 80%;
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }
        #send-button {
            padding: 8px 15px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }
        .bot-message {
            background-color: #f1f1f1;
            padding: 10px;
            border-radius: 10px;
            margin: 5px 0;
            max-width: 80%;
        }
        .user-message {
            background-color: #e3f2fd;
            padding: 10px;
            border-radius: 10px;
            margin: 5px 0 5px auto;
            max-width: 80%;
            text-align: right;
        }
    </style>
</head>
<body>
    <h1>Simple Rasa Chat</h1>
    <div id="chat-container"></div>
    <div>
        <input type="text" id="user-input" placeholder="Type your message here...">
        <button id="send-button">Send</button>
    </div>

    <script>
        const chatContainer = document.getElementById('chat-container');
        const userInput = document.getElementById('user-input');
        const sendButton = document.getElementById('send-button');
        
        // Add event listeners
        sendButton.addEventListener('click', sendMessage);
        userInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });

        // Function to add messages to the chat container
        function addMessage(message, isUser) {
            const messageDiv = document.createElement('div');
            messageDiv.className = isUser ? 'user-message' : 'bot-message';
            messageDiv.textContent = message;
            chatContainer.appendChild(messageDiv);
            chatContainer.scrollTop = chatContainer.scrollHeight;
        }

        // Function to send message to Rasa with polling for results
        async function sendMessage() {
            const message = userInput.value.trim();
            if (message === '') return;
            
            // Add user message to chat
            addMessage(message, true);
            userInput.value = '';
            
            // Add a temporary "thinking" indicator
            const thinkingId = "thinking-" + Date.now();
            const thinkingDiv = document.createElement('div');
            thinkingDiv.id = thinkingId;
            thinkingDiv.className = 'bot-message';
            thinkingDiv.textContent = "Thinking...";
            chatContainer.appendChild(thinkingDiv);
            chatContainer.scrollTop = chatContainer.scrollHeight;
            
            try {
                // Use a consistent sender ID for conversation tracking
                const senderId = sessionStorage.getItem('rasaSessionId') || 'user_' + Date.now();
                if (!sessionStorage.getItem('rasaSessionId')) {
                    sessionStorage.setItem('rasaSessionId', senderId);
                }
                
                // Send message to Rasa server
                let retries = 0;
                let maxRetries = 5;
                let hasResponse = false;
                
                while (retries < maxRetries && !hasResponse) {
                    const response = await fetch('http://localhost:5005/webhooks/rest/webhook', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            sender: senderId,
                            message: message
                        }),
                        mode: 'cors'
                    });
                    
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    
                    const data = await response.json();
                    
                    // If we got a non-empty response, show it and exit the loop
                    if (data.length > 0) {
                        // Remove the thinking indicator
                        const thinkingElement = document.getElementById(thinkingId);
                        if (thinkingElement) thinkingElement.remove();
                        
                        // Add bot responses to chat
                        data.forEach(msg => {
                            if (msg.text) {
                                addMessage(msg.text, false);
                            }
                        });
                        hasResponse = true;
                    } else {
                        // If empty response, wait 1 second before retrying
                        await new Promise(resolve => setTimeout(resolve, 1000));
                        retries++;
                        
                        // Update the thinking indicator to show progress
                        const thinkingElement = document.getElementById(thinkingId);
                        if (thinkingElement) {
                            thinkingElement.textContent = `Thinking${'.'.repeat((retries % 3) + 1)}`;
                        }
                    }
                }
                
                // Remove thinking indicator if still present
                const thinkingElement = document.getElementById(thinkingId);
                if (thinkingElement) {
                    if (!hasResponse) {
                        // If we never got a response after all retries
                        thinkingElement.textContent = "Sorry, no response received after several attempts. Please try again.";
                    } else {
                        thinkingElement.remove();
                    }
                }
                
            } catch (error) {
                console.error('Error:', error);
                
                // Remove thinking indicator if present
                const thinkingElement = document.getElementById(thinkingId);
                if (thinkingElement) thinkingElement.remove();
                
                addMessage(`Error connecting to the bot: ${error.message}`, false);
            }
        }

        // Send an initial greeting when the page loads
        window.onload = function() {
            setTimeout(() => {
                addMessage("Welcome! Type a message to start chatting with the bot.", false);
            }, 500);
        };
    </script>
</body>
</html> 
